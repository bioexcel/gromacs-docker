---
name: Build and push to Docker Hub
on: [push,pull_request]
env:
  # docker_repo:   This must be changed between forks.  This should be the
  #                dockerhub repository you will be using to register the
  #                docker containers to.
  docker_repo: kingsleyobiedeh/gromacs
  
  
  # Here you can specify the versions of the
  # various parameters, such as gcc or cuda.
  fftw: 3.3.8
  gromacs: 2022.2
  cmake: 3.17.1
  gcc: 8
  cuda: 11.6.0
  openmpi: 4.0.0
  ubuntu: 20.04
  rdtscp: on

  # simd_types:  List of simd instruction set, Multiple option can be
  #              chosen separated by space.
  simd_types: "sse2 avx avx2"

############################################
#  Do not modify anything below this line. #
############################################

jobs:
  # Convert additiona_simd_types into a JSON object that can be used as
  # an input to the build matrix in build_sub_containers
  get_builds:
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - id: set-matrix
      run: |
        for type in ${{ env.simd_types }}; do SIMD=$SIMD{\"simd\":\"$type\"}; done;
        SIMD=`echo $SIMD | sed 's/}{/},{/g'`
        echo "::set-output name=matrix::{\"include\":[$SIMD]}"

  # Builds the fftw container needed for the final combined container.
  build_fftw_container:
    needs: get_builds
    runs-on: ubuntu-20.04
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'

    - uses: actions/setup-python@v1
      with:
        python-version: "3.7"

    - name: Install python dependencies
      run: |
        set -xe
        python -VV
        python -m site
        python -m pip install --upgrade pip
        python -m pip install hpccm

   # The Dockerfiles must be generated based on SIMD type, GROMACS
   # version and CUDA version
    - name: Generate Dockerfiles for FFTW
      run: |
        cd gromacs-hpccm-recipes-mult-stages
        python3 generate_specifications_file.py fftw \
        --format docker \
        --ubuntu ${{ env.ubuntu }} \
        --gcc ${{ env.gcc }} \
        --simd ${{ env.simd_types }} \
        --fftw ${{ env.fftw }} \
        > Dockerfile

    - name: Build fftw container
      run: |
        cd gromacs-hpccm-recipes-mult-stages
        cat Dockerfile
        docker build -t "${{env.docker_repo}}:fftw-${{env.fftw}}" -f Dockerfile .

    - name: Docker Login
      uses: docker/login-action@v1
      with:
        username: ${{secrets.DOCKER_USERNAME}}
        password: ${{secrets.DOCKER_PASSWORD}}

    - name: Docker Push
      if: "${{ github.event_name == 'push' }}"
      run: |
        docker push "${{env.docker_repo}}:fftw-${{env.fftw}}"
        sleep 60
        # Needed to give time to register container before being
        # Pulled by next steps.


  # Build sub containers, one for each SIMD type
  build_subcontainer:
    needs: [build_fftw_container, get_builds]
    # Fetch JSON created from simd_types
    strategy:
      matrix: ${{fromJson(needs.get_builds.outputs.matrix)}}
    runs-on: ubuntu-20.04

    if: "!contains(github.event.head_commit.message, 'ci skip')"
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'

    - uses: actions/setup-python@v1
      with:
        python-version: "3.7"

    - name: Install python dependencies
      run: |
        set -xe
        python -VV
        python -m site
        python -m pip install --upgrade pip
        python -m pip install hpccm

   # The Dockerfiles must be generated based on SIMD type, GROMACS
   # version and CUDA version
    - name: Generate Dockerfiles
      run: |
        cd gromacs-hpccm-recipes-mult-stages
        python3 generate_specifications_file.py gmx \
        --format docker \
        --gromacs ${{env.gromacs}} \
        --ubuntu ${{env.ubuntu}} \
        --gcc ${{env.gcc}} \
        --cuda ${{env.cuda}} \
        --cmake ${{env.cmake}} \
        --engines simd=${{matrix.simd}}:rdtscp=${{env.rdtscp}} \
        --openmpi ${{env.openmpi}} \
        --fftw-container ${{env.docker_repo}}:fftw-${{env.fftw}} \
        > Dockerfile

    - name: Build the Docker image
      env:
        docker_tag: gmx-${{env.gromacs}}-cuda-${{env.cuda}}-${{matrix.simd}}
      run: |
        cd gromacs-hpccm-recipes-mult-stages
        cat Dockerfile
        docker build -t "${{env.docker_repo}}:${{env.docker_tag}}" -f Dockerfile .

    - name: Docker Login
      uses: docker/login-action@v1
      with:
        username: ${{secrets.DOCKER_USERNAME}}
        password: ${{secrets.DOCKER_PASSWORD}}

    - name: Docker Push
      env:
        docker_tag: gmx-${{env.gromacs}}-cuda-${{env.cuda}}-${{matrix.simd}}
      if: "${{ github.event_name == 'push' }}"
      run: |
        docker push "${{env.docker_repo}}:${{env.docker_tag}}"

# Combine all containers into one primary container and
# publish to docker hub
  build_final_container:
    needs: build_subcontainer
    runs-on: ubuntu-20.04
    if: "!contains(github.event.head_commit.message, 'ci skip')"

    # Only combine and push to Docker Hub if we are on dev branch (TODO: master) and 
    # this is not a pull request. Skip if commit message is "ci skip"
    steps:
    - uses: actions/checkout@master

    - name: Edit Dockerfile- Set repo
      run: |
        sed -i "s|gromacs/gromacs-docker|${{env.docker_repo}}|g" Dockerfile

    - name: Edit Dockerfile- Set FFTW version
      run: |
        sed -i "s|fftw-3.3.8|fftw-${{env.fftw}}|g" Dockerfile

    - name: Edit Dockerfile- Set CUDA version
      run: |
        sed -i "s|FROM nvidia/cuda:10.2|FROM nvidia/cuda:${{env.cuda}}|g" Dockerfile

    - name: Edit Dockerfile- Set Ubuntu version
      run: |
        sed -i "s|runtime-ubuntu18.04|runtime-ubuntu${{env.ubuntu}}|g" Dockerfile

    - name: Edit Dockerfile- Set SIMD types to be loaded
      run: |
        for type in ${{env.simd_types}}
        do
            sed -i "/GROMACS configurations/a COPY --from=${{env.docker_repo}}:gmx-${{env.gromacs}}-cuda-${{env.cuda}}-$type     \/usr\/local\/gromacs \/gromacs" Dockerfile
            done

    - name: Edit Dockerfile- COPY openmpi
      run: |
        FIRST_SIMD=`echo ${{env.simd_types}} | grep -o ^[a-zA-Z0-9]*`
        sed -i "/# Copy compiled dependencies/a COPY --from=${{env.docker_repo}}:gmx-${{env.gromacs}}-cuda-${{env.cuda}}-$FIRST_SIMD    \/usr\/local\/openmpi \/usr\/local\/openmpi" Dockerfile

    - name: Edit Dockerfile- COPY cuda-ver
      run: |
        FIRST_SIMD=`echo ${{env.simd_types}} | grep -o ^[a-zA-Z0-9]*`
        CUDA_DIR=`echo ${{env.cuda}} | grep -o ^[0-9][0-9]\.[0-9]*`
        sed -i "/# Copy compiled dependencies/a COPY --from=${{env.docker_repo}}:gmx-${{env.gromacs}}-cuda-${{env.cuda}}-$FIRST_SIMD     \/usr\/local\/cuda-$CUDA_DIR \/usr\/local\/cuda-$CUDA_DIR" Dockerfile


            
    - name: Print out details
      run: |
        cat Dockerfile
    
    - name: Build the combined Docker image
      env:
        docker_tag: ${{env.gromacs}}
      run: |
        docker build -t "${{env.docker_repo}}:${{env.docker_tag}}" -t "${{env.docker_repo}}:latest" -f Dockerfile .

    - name: Docker Login
      uses: docker/login-action@v1
      with:
        username: ${{secrets.DOCKER_USERNAME}}
        password: ${{secrets.DOCKER_PASSWORD}}

    - name: Docker Push version tag
      env:
        docker_tag: ${{env.gromacs}}
      run: |
        docker push "${{env.docker_repo}}:${{env.docker_tag}}"

    - name: Docker Push latest tag
      if: github.ref == 'master' || github.repository != 'bioexcel/gromacs-docker'
      run: docker push "${{env.docker_repo}}:latest"
      
    - name: Docker Push dev tag
      if: github.ref == 'dev' || github.repository != 'bioexcel/gromacs-docker'
      run: docker push "${{env.docker_repo}}:dev"

